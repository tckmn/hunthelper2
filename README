INTRODUCTION

hunthelper is a tool designed to help medium-to-large sized teams organize
their puzzle solving for large-scale puzzle hunts (e.g. MIT Mystery Hunt).

It consists of a bot that integrates with Google Sheets and Discord, which
automatically does the following when a master spreadsheet is updated:

 - Creates a Google Drive folder for each round and a spreadsheet for each
   puzzle in the corresponding folder.

 - Creates a Discord category for each round and a text channel for each puzzle
   in the corresponding category.

 - When a puzzle is solved, adds a [SOLVED] prefix to the name of the sheet,
   moves the channel to a "solved" category, and announces the solution in a
   designated channel.

To use hunthelper, you will need to be able to host a small Python webserver
on a publicly accessible machine (via e.g. port forwarding). More details are
described below.

hunthelper has been hastily patched together and modified before various
instances of the MIT Mystery Hunt, so it may have significant bugs. Use at your
own risk. (It will never take any destructive actions, however, such as
deleting sheets or channels.)


================================================================================


INSTRUCTIONS

1. Copy config.example.json to config.json, where you should insert the
   appropriate values as you go through steps 2-4. (The settings are described
   in further detail in the CONFIGURATION section below.)

2. Set up the desired port forwarding on the machine you want to run hunthelper
   on. Any ports are fine, the external one goes in the sheets script and the
   internal one goes in config.json.

3. Create a Google Cloud Platform project at [1]. Enable the Drive API by
   following the instructions at [2], obtaining a client ID and secret. Obtain
   a refresh token with the /auth/drive scope at [3]. Copy the ID of the folder
   you want puzzles to go in from its URL. TODO: explain finnicky details

     [1]: https://console.developers.google.com
     [2]: https://developers.google.com/drive/api/v3/enable-drive-api
     [3]: https://developers.google.com/oauthplayground/

4. Create a Discord bot at [4], obtaining a bot token. Add the bot to your
   Discord server with admin privileges. Enable Developer Mode in Discord under
   User Settings -> Appearance, which will allow copying the various IDs
   necessary for further configuration (right click -> Copy ID).

     [4]: https://discord.com/developers/applications/

5. Hook up the master sheet. TODO: explain

6. Run ./hunthelper.py from this directory for the duration of the hunt.


================================================================================


CONFIGURATION

Here are short descriptions of each configuration option you need to specify in
config.json.

port

    The local port on your machine where web traffic to your public IP is being
    forwarded.

drive_client_id
drive_client_secret

    The OAuth 2.0 credentials for your Google Cloud Platform project. These can
    be found under "Credentials" on the Google developer console (after you
    have created them).

drive_refresh_token

    An OAuth 2.0 refresh token, which must have the /auth/drive scope. You can
    generate one using e.g. the OAuth Playground linked above.

drive_root

    The ID of the folder you want puzzles to be kept in. This can be found by
    opening the folder in a web browser and copying the long alphanumeric
    string in the URL.

discord_bot

    Your Discord bot's token, found in the Discord Developer Portal under the
    "Bot" section of your application.

discord_guild

    The ID of the Discord server where you want channel groups and channels to
    be created for each puzzle.

discord_log

    The ID of the Discord channel in your server where you want informational
    messages to be logged.

discord_announce

    The ID of the Discord channel in your server where you want messages
    relevant to all hunters to be announced (e.g. when a puzzle is solved).

discord_position

    The ID of the Discord channel under which new round categories should be
    created.

discord_role

    The ID of the Discord role you want to give every new user automatically.

discord_admin

    The ID of the Discord user who is allowed to execute arbitrary Python code
    by typing it into the log channel.

discord_who_working

    The ID of the user or role you want to be the trigger for pinging everyone
    who has edited the sheet of the corresponding puzzle.

discord_pingid

    The ID of the user or role you want to be pinged when something important
    or unexpected that may require manual intervention occurs.

drive2discord

    A map from Google Drive person IDs to Discord IDs. A helpful and comically
    fragile script for collecting these:
    d={};setInterval(()=>{d[$('.YysZRb').textContent]=$('.jBPFKc').href},100)

puzprefix

    The beginning of the URL where puzzles are found, used for automatically
    generating puzzle links. For example, if a puzzle named "Foo Bar" is on
    the page https://some.website/puzzles/foo_bar, you should set this to
    "https://some.website/puzzles/".

    You may also need to edit the `normalize' function in hunthelper.py, which
    is used solely to transform the puzzle name into the URL suffix.
